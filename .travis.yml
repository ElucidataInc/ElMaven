sudo: required

matrix:
  include:
    - os: linux
      dist: bionic
      language: cpp
      compiler: gcc-7
      group: deprecated-2017Q2
    - os: osx
      osx_image: xcode11.3
      language: cpp


env:
  global:
    - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"


git:
  depth: false


before_install:
    -  if [ "$TRAVIS_OS_NAME" == "linux" ]; then
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0C49F3730359A14518585931BC711F9BA15703C6;
       fi

install:
  - |

    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
        brew install grep;
        brew install llvm@7

        # brew no longer provides Qt 5.11, so we use an older formula for the same
        curl -O https://raw.githubusercontent.com/Homebrew/homebrew-core/65a45a9e61f15046a256cdba6a008f38f79570c9/Formula/qt.rb
        brew install ./qt.rb
        brew link qt5 --force;

        # compile sentry-native binaries and libraries only if we are building an installer
        if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then
          curl -O -J -L https://github.com/getsentry/sentry-native/releases/download/0.1.3/sentry-native-0.1.3.zip
          unzip sentry-native-0.1.3.zip &> /dev/null
          cd sentry-native/gen_macosx
          make -j4 config=release sentry_crashpad
          export SENTRY_MACOSX_BIN="$PWD/bin/Release"
          cd -
        fi
    fi

    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo apt-get install -y -qq lcov
      sudo apt-get update -qq;
      sudo apt-get install -y -qq --allow-unauthenticated qt5-qmake qtbase5-dev qtscript5-dev qtdeclarative5-dev libqt5webkit5-dev;
      sudo apt-get install -y -qq --allow-unauthenticated --allow-downgrades libpulse-mainloop-glib0=1:8.0-0ubuntu3.10 libpulse0=1:8.0-0ubuntu3.10 libpulse-dev
      sudo apt-get install -y -qq --allow-unauthenticated libqt5opengl5 libqt5multimedia5 libqt5multimedia5-plugins qtmultimedia5-dev;
      sudo apt-get install -y -qq --allow-unauthenticated libsqlite3-dev libboost-all-dev libnetcdf-dev;
      eval "${MATRIX_EVAL}";
    fi

script:
  - |
    git submodule update --init --recursive
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      export LDFLAGS="-L/usr/local/opt/llvm@7/lib -Wl,-rpath,/usr/local/opt/llvm@7/lib"
      export PATH="/usr/local/opt/llvm@7/bin/:$PATH"
      export CPPFLAGS="-I/usr/local/opt/llvm@7/include -I/usr/local/opt/llvm@7/c++/v1/"

      if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
        qmake CONFIG+=debug -o Makefile build.pro;
        make -j4;
        if [ $? != 0 ]; then
          echo "An error occurred during build step"
          exit 1
        fi

        ./run_tests.sh;
      else
        # to export the path to sentry-native dynamic library
        export PATH="$SENTRY_MACOSX_BIN:$PATH"
        export LDFLAGS="$LDFLAGS -L/$SENTRY_MACOSX_BIN"

        # export private DSN as base64 encoded string (helps with stringification)
        export SENTRY_DSN_BASE64=`echo $SENTRY_DSN | base64`

        # export encoded update repository URL
        export UPDATE_REPO_URL_BASE64=`echo $UPDATE_REPO_URL | base64`

        qmake CONFIG+=release CONFIG+=force_debug_info CONFIG+=separate_debug_info NOTESTS=yes
        make -j4;
      fi
    fi

    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export CXX="g++-7";
      export CC="gcc-7";
      sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-7 /usr/bin/gcc;
      sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-7 /usr/bin/g++;
      g++ -v;
      gcc -v;

      if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
        export QTEST_FUNCTION_TIMEOUT=1200000
        echo $QTEST_FUNCTION_TIMEOUT
        echo no | ./run.sh
        if [ $? != 0 ]; then
          echo "An error occurred during build step"
          exit 1
        fi

        ./run_tests.sh
        if [ $? != 0 ]; then
          echo "One or more tests failing"
          exit 1
        fi

        lcov -b src/core/libmaven/ --capture --directory ../build/tmp/maven/ --output-file lcov.info --no-external
        lcov --summary lcov.info
      else
        echo yes | ./run.sh
      fi
    fi


after_success:
  - |
    if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
      bash <(curl -s https://codecov.io/bash)
    fi

  - |
    if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
      echo "This build is for a PR. Not proceeding with installer creation."
      exit 0
    fi

    export ELMAVEN_TAG=`git describe --tags`
    SUBSTRING=$(echo $ELMAVEN_TAG| cut -d'-' -f 1)
    export ELMAVEN_VERSION=${SUBSTRING[@]:1}

    if [ "$TRAVIS_TAG" != "" ]; then
      export ELMAVEN_BRANCH=$TRAVIS_TAG
    else
      export ELMAVEN_BRANCH=$TRAVIS_BRANCH
    fi

    export PACKAGING_REPO=elmaven-packaging
    git clone -q https://github.com/ElucidataInc/elmaven-packaging.git

    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      cd $PACKAGING_REPO

      # define variables
      PARENT_DIR=$PWD
      BREAKPAD_TOOLS=$PWD/breakpad_tools/
      INSTALLER_TOOLS_DIR=$PWD/qt_ifw_tools/mac
      ELMAVEN_BIN="$PARENT_DIR/../bin/"
      BIN="$PARENT_DIR/bin/"
      NODE_MAC="$PARENT_DIR/node_mac/"
      ARCHIVE_FILE="maven.7z"
      PACKAGE_DATA="$PARENT_DIR/packages/com.vendor.product/data/"
      INSTALLER="El-MAVEN-$ELMAVEN_BRANCH"

      # collect runtime plugins
      echo "Collecting plugins ..."
      cd $PARENT_DIR

      if [ ! -d $BIN ]; then
        mkdir $BIN
      fi

      cd $BIN
      rm -rf *

      rsync -av --progress --exclude={'windows','linux','node','node_bin','node.exe','MavenTests','methods'} $ELMAVEN_BIN . &>/dev/null

      # create application bundles for both binaries
      echo "Deploying bundles ..."
      cp "$SENTRY_MACOSX_BIN/crashpad_handler" "El-MAVEN.app/Contents/MacOS/"
      macdeployqt El-MAVEN.app
      macdeployqt peakdetector.app
      cp "$SENTRY_MACOSX_BIN/libsentry_crashpad.dylib" "El-MAVEN.app/Contents/Frameworks/"
      install_name_tool -change @rpath/libsentry_crashpad.dylib @executable_path/../Frameworks/libsentry_crashpad.dylib "El-MAVEN.app/Contents/MacOS/El-MAVEN"

      if [ $? != 0 ]; then
        echo "Failed to create application bundles."
        exit 1
      fi

      # upload debug symbols
      echo "Uploading debug symbols for El-MAVEN ..."
      cd $BIN
      $BREAKPAD_TOOLS/mac/sentry-cli --auth-token $SENTRY_AUTH upload-dif --project el-maven-logging --org el-maven --include-sources --wait El-MAVEN.app.dSYM/Contents/Resources/DWARF/
      rm -r *.dSYM

      # copy node
      echo "Copying node executable ..."
      cp -r $NODE_MAC $BIN

      # download our precompiled binaries of qt-ifw
      echo "Downloading binaries for Qt Installer Framework ..."
      cd $PARENT_DIR

      wget https://www.dropbox.com/s/jwzuf4howm71s1d/archivegen?dl=1 -O archivegen &> /dev/null
      chmod u+x ./archivegen
      wget https://www.dropbox.com/s/yl47a7wjyzy91o9/binarycreator?dl=1 -O binarycreator &> /dev/null
      chmod u+x ./binarycreator
      wget https://www.dropbox.com/s/m5xjddbxon5cry9/installerbase?dl=1 -O installerbase &> /dev/null
      chmod u+x ./installerbase

      # generate archive
      echo "Generating archive ..."
      cd $PARENT_DIR

      if [ -f $ARCHIVE_FILE ]; then
        rm $ARCHIVE_FILE
      fi

      if [ -f $PACKAGE_DATA/$ARCHIVE_FILE ]; then
        rm $PACKAGE_DATA/$ARCHIVE_FILE
      fi

      ./archivegen $ARCHIVE_FILE $BIN

      if [ $? != 0 ]; then
        echo "Failed to generate archive. Make sure archivegen is in system path."
        exit 1
      fi

      mkdir $PACKAGE_DATA
      cp $ARCHIVE_FILE $PACKAGE_DATA

      # update version
      echo "Updating version string in config file ..."
      cd $PARENT_DIR

      python update_version.py $ELMAVEN_VERSION $UPDATE_REPO_URL

      if [ $? != 0 ]; then
        echo "Failed to update version in config file."
        exit 1
      fi

      export IS_RELEASE_TAG=false
      if [ "$TRAVIS_TAG" != "" ] && [[ "$TRAVIS_TAG" != *"alpha"* ]] && [[ "$TRAVIS_TAG" != *"beta"* ]]; then
        # create update repository for this release
        echo "Creating an update repository for $ELMAVEN_BRANCH ..."
        IS_RELEASE_TAG=true
        export ELMAVEN_UPDATES="repository"
        cd $PARENT_DIR
        mkdir "$PARENT_DIR/$ELMAVEN_UPDATES"
        $INSTALLER_TOOLS_DIR/repogen -p packages -i com.vendor.product "$PARENT_DIR/$ELMAVEN_UPDATES"
        if [ $? != 0 ]; then
          echo "Failed to create update archive for release."
          exit 1
        fi
        mv "$PARENT_DIR/$ELMAVEN_UPDATES" "$PARENT_DIR/../"
      fi

      # create installer
      echo "Creating installer ..."
      cd $PARENT_DIR

      ./binarycreator --offline-only --ignore-translations -r extras.qrc -c config/config.xml -p packages/ $INSTALLER

      if [ $? != 0 ]; then
        echo "Failed to create installer. Make sure binarycreator is in system path."
        exit 1
      fi

      # create keychain and import certificate
      echo "Creating new Keychain and installing developer certificate ..."
      security create-keychain -p dummypass build.keychain
      security default-keychain -s build.keychain
      security unlock-keychain -p dummypass build.keychain

      echo $CERTIFICATE_OSX_P12 | base64 --decode > certificate.p12
      security import certificate.p12 -k build.keychain -P $CERTIFICATE_OSX_PASSWORD -T /usr/bin/codesign
      security find-identity -v
      security set-key-partition-list -S apple-tool:,apple: -s -k dummypass build.keychain

      # codesign installer
      echo "Codesigning the installer ..."
      cd $PARENT_DIR

      codesign  –v –v -s "Elucidata corporation" -o runtime $INSTALLER.app
      codesign –v –v=4 $INSTALLER.app

      if [ $? != 0 ]; then
        echo "Failed to sign installer. Make sure the certificate exists."
        exit 1
      fi

      # compressing
      echo "Compressing installer into a zip file ..."
      zip -r "$INSTALLER.zip" "$INSTALLER.app" &> /dev/null

      cd $PARENT_DIR/../
      cp "$PACKAGING_REPO/$INSTALLER.zip" .

      # S3 provider requires the file(s) for deployment to be in a directory
      mkdir $ELMAVEN_BRANCH
      mv "$PACKAGING_REPO/$INSTALLER.zip" $ELMAVEN_BRANCH
    fi


deploy:
  - provider: releases
    skip_cleanup: true
    name: $TRAVIS_TAG
    api_key: $GITHUB_RELEASE_TOKEN
    file: $INSTALLER.zip
    draft: true
    overwrite: true
    on:
      tags: true
      condition: $TRAVIS_OS_NAME = "osx"

  - provider: s3
    skip_cleanup: true
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY
    region: us-west-2
    bucket: "elmaven-installers"
    upload-dir: "Mac"
    acl: public_read
    local_dir: $ELMAVEN_BRANCH
    on:
      all_branches: true
      condition: $TRAVIS_OS_NAME = "osx"

  - provider: s3
    skip_cleanup: true
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY
    region: us-west-2
    bucket: "elmaven-installers"
    upload-dir: "mac-updates"
    acl: public_read
    local_dir: $ELMAVEN_UPDATES
    on:
      tags: true
      condition: $IS_RELEASE_TAG = true
